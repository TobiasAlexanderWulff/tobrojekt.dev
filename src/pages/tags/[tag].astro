---
import Base from "~/layouts/Base.astro";
import { getCollection } from 'astro:content';
import { faviconFor } from "~/lib/links";
import {
  getDictionary,
  resolveLocale,
  localizePath,
  resolveLocalizedValue,
} from "~/lib/i18n";

export async function getStaticPaths() {
  const tags = await getCollection('tags');
  return tags.map((t) => ({ params: { tag: t.data.id }, props: { tag: t.data.id, label: t.data.label } }));
}

const { tag, label } = Astro.props as { tag: string; label: string };
const projects = (await getCollection('projects')).filter((p) => (p.data.tags ?? []).includes(tag) && p.data.visibility !== 'private');

const locale = resolveLocale(Astro.currentLocale);
const dictionary = getDictionary(locale);
const pageTitle = `${dictionary.tagsIndex.detailMetaTitle(label)} â€“ ${dictionary.site.name}`;
const pageDescription = dictionary.tagsIndex.detailMetaDescription(label);
const localizedProjects = projects.map((entry) => ({
  entry,
  title: resolveLocalizedValue(entry.data.title, locale) ?? '',
  summary: resolveLocalizedValue(entry.data.summary, locale) ?? '',
}));
---
<Base title={pageTitle} description={pageDescription}>
  <section class="container py-10">
    <h1 class="text-3xl font-bold mb-6">{dictionary.tagsIndex.detailTitle(label)}</h1>
    {localizedProjects.length === 0 ? (
      <p class="text-slate-700">{dictionary.tagsIndex.empty}</p>
    ) : (
      <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {localizedProjects.map(({ entry, title, summary }) => (
          <li class="p-4 border rounded hover:shadow-sm transition">
            <a href={localizePath(`/projects/${entry.slug}`, locale)} class="block">
              <h3 class="font-semibold">{title}</h3>
              <p class="text-slate-700 text-sm">{summary}</p>
            </a>
            {entry.data.links?.length ? (
              <div class="mt-2 flex items-center gap-2">
                {entry.data.links.map((l) => {
                  const fav = faviconFor(l.url);
                  const src = l.icon ?? fav.src;
                  const onerr = l.icon ? undefined : (fav.fallback ? `this.onerror=null;this.src='${fav.fallback}'` : undefined);
                  return (
                    <a href={l.url} rel="noopener noreferrer" target="_blank" aria-label={l.label ?? l.rel ?? l.url} class="inline-flex">
                      {src ? (
                        <img src={src} alt={fav.alt} width="16" height="16" loading="lazy" class="w-4 h-4 rounded-sm" onerror={onerr} />
                      ) : null}
                    </a>
                  );
                })}
              </div>
            ) : null}
          </li>
        ))}
      </ul>
    )}
  </section>
</Base>
