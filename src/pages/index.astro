---
import Base from "~/layouts/Base.astro";
import { getCollection } from 'astro:content';
import { faviconFor } from "~/lib/links";
import {
  getDictionary,
  resolveLocale,
  localizePath,
  resolveLocalizedValue,
} from "~/lib/i18n";

/**
 * Home page highlights featured projects before a lightweight recent list.
 * Filtering happens server-side so static builds stay fast.
 */
const all = await getCollection('projects');
const featured = all
  .filter((p) => p.data.visibility !== 'private' && p.data.featured)
  .sort((a, b) => (a.data.priority ?? 999) - (b.data.priority ?? 999));
const recent = all
  .filter((p) => p.data.visibility !== 'private')
  .slice(0, 6);

const locale = resolveLocale(Astro.currentLocale);
const dictionary = getDictionary(locale);
const featuredLocalized = featured.map((entry) => ({
  entry,
  title: resolveLocalizedValue(entry.data.title, locale) ?? '',
  summary: resolveLocalizedValue(entry.data.summary, locale) ?? '',
}));
const recentLocalized = recent.map((entry) => ({
  entry,
  title: resolveLocalizedValue(entry.data.title, locale) ?? '',
  summary: resolveLocalizedValue(entry.data.summary, locale) ?? '',
}));
---
<Base>
  <section class="container py-12">
    <h1 class="text-3xl font-bold mb-3">{dictionary.homepage.heroTitle}</h1>
    <p class="text-slate-700 max-w-prose">{dictionary.homepage.heroIntro}</p>
  </section>

  <section class="container py-6">
    <h2 class="text-2xl font-semibold mb-4">{dictionary.homepage.featuredHeading}</h2>
    {featuredLocalized.length === 0 ? (
      <p class="text-slate-600">{dictionary.homepage.featuredEmpty}</p>
    ) : (
      <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {featuredLocalized.map(({ entry, title, summary }) => (
          <li class="p-4 border rounded hover:shadow-sm transition">
            <a href={localizePath(`/projects/${entry.slug}`, locale)} class="block">
              <h3 class="font-semibold">{title}</h3>
              <p class="text-slate-700 text-sm">{summary}</p>
            </a>
            {entry.data.links?.length ? (
              <div class="mt-2 flex items-center gap-2">
                {entry.data.links.map((l) => {
                  const fav = faviconFor(l.url);
                  const src = l.icon ?? fav.src;
                  const onerr = l.icon ? undefined : (fav.fallback ? `this.onerror=null;this.src='${fav.fallback}'` : undefined);
                  return (
                    <a href={l.url} rel="noopener noreferrer" target="_blank" aria-label={l.label ?? l.rel ?? l.url} class="inline-flex">
                      {src ? (
                        <img src={src} alt={fav.alt} width="16" height="16" loading="lazy" class="w-4 h-4 rounded-sm" onerror={onerr} />
                      ) : null}
                    </a>
                  );
                })}
              </div>
            ) : null}
          </li>
        ))}
      </ul>
    )}
  </section>

  <section class="container py-6">
    <h2 class="text-2xl font-semibold mb-4">{dictionary.homepage.recentHeading}</h2>
    {recentLocalized.length === 0 ? (
      <p class="text-slate-600">{dictionary.homepage.recentEmpty}</p>
    ) : (
      <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
        {recentLocalized.map(({ entry, title, summary }) => (
          <li class="p-4 border rounded hover:shadow-sm transition">
            <a href={localizePath(`/projects/${entry.slug}`, locale)} class="block">
              <h3 class="font-semibold">{title}</h3>
              <p class="text-slate-700 text-sm">{summary}</p>
            </a>
            {entry.data.links?.length ? (
              <div class="mt-2 flex items-center gap-2">
                {entry.data.links.map((l) => {
                  const fav = faviconFor(l.url);
                  const src = l.icon ?? fav.src;
                  const onerr = l.icon ? undefined : (fav.fallback ? `this.onerror=null;this.src='${fav.fallback}'` : undefined);
                  return (
                    <a href={l.url} rel="noopener noreferrer" target="_blank" aria-label={l.label ?? l.rel ?? l.url} class="inline-flex">
                      {src ? (
                        <img src={src} alt={fav.alt} width="16" height="16" loading="lazy" class="w-4 h-4 rounded-sm" onerror={onerr} />
                      ) : null}
                    </a>
                  );
                })}
              </div>
            ) : null}
          </li>
        ))}
      </ul>
    )}
  </section>
</Base>
