---
import Base from "~/layouts/Base.astro";
import { getCollection } from 'astro:content';
import { getLatestCommitDate, formatYMD } from "~/lib/github";
import { faviconFor } from "~/lib/links";
import {
  getDictionary,
  resolveLocale,
  localizePath,
  resolveLocalizedValue,
} from "~/lib/i18n";

export async function getStaticPaths() {
  const entries = await getCollection('projects');
  return entries
    .filter((e) => e.data.visibility !== 'private')
    .map((entry) => ({ params: { slug: entry.slug }, props: { entry } }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

const locale = resolveLocale(Astro.currentLocale);
const dictionary = getDictionary(locale);
const localizedTitle = resolveLocalizedValue(entry.data.title, locale) ?? '';
const localizedSummary = resolveLocalizedValue(entry.data.summary, locale) ?? '';
const statusLabel = entry.data.status
  ? dictionary.projectDetail.statusLabels[entry.data.status] ?? entry.data.status
  : null;
const startedLabel = entry.data.dates?.started
  ? dictionary.projectDetail.started
  : dictionary.projectDetail.created;
const startedValue = entry.data.dates?.started ?? entry.data.dates?.created ?? null;
const completedValue = entry.data.dates?.completed ?? null;

const pageTitle = `${localizedTitle} â€“ ${dictionary.site.name}`;
const pageDescription = localizedSummary;

// Prefer external GitHub updated date when configured
let externalUpdated: string | null = null;
const gh = entry.data.external?.github as { repo?: string; branch?: string } | undefined;
if (gh?.repo) {
  externalUpdated = await getLatestCommitDate(gh.repo, gh.branch ?? 'main');
}
const updatedDate = externalUpdated ?? entry.data.dates?.updated;
const displayUpdated = updatedDate ? formatYMD(updatedDate) : null;

// Prefer an inline playable demo when available
const demoLink = entry.data.links?.find((l) => l.rel === 'demo');
let inlineDemoUrl: string | null = null;
if (demoLink?.url) {
  try {
    const parsedDemoUrl = new URL(demoLink.url);
    if (parsedDemoUrl.protocol === 'https:') {
      inlineDemoUrl = parsedDemoUrl.toString();
    }
  } catch {
    inlineDemoUrl = null;
  }
}
const sc = entry.data.media?.social_card;
const aspectPadding = sc?.width && sc?.height ? `${(sc.height / sc.width) * 100}%` : '56.25%';
---
<Base title={pageTitle} description={pageDescription}>
  <article class="container py-10">
    <header class="mb-6">
      <h1 class="text-3xl font-bold">{localizedTitle}</h1>
      <p class="text-slate-700">{localizedSummary}</p>
      {(statusLabel || entry.data.dates) ? (
        <p class="text-sm text-slate-600 mt-1">
          {statusLabel ? (
            <>
              {dictionary.projectDetail.status}:{' '}
              <span class="capitalize">{statusLabel}</span>
            </>
          ) : null}
          {startedValue ? (
            <span class="ml-3">{startedLabel}: {startedValue}</span>
          ) : null}
          {completedValue ? (
            <span class="ml-3">{dictionary.projectDetail.completed}: {completedValue}</span>
          ) : null}
          {!entry.data.dates?.completed && displayUpdated ? (
            <span class="ml-3">{dictionary.projectDetail.updated}: {displayUpdated}</span>
          ) : null}
        </p>
      ) : null}
      {entry.data.tags?.length ? (
        <div class="mt-2 flex flex-wrap gap-2">
          {entry.data.tags.map((t) => (
            <a href={localizePath(`/tags/${t}`, locale)} class="text-xs bg-slate-100 px-2 py-1 rounded">{t}</a>
          ))}
        </div>
      ) : null}
      {inlineDemoUrl ? (
        <section class="mt-4 max-w-4xl">
          <div class="rounded border overflow-hidden">
            <div class="relative w-full" style={`padding-top: ${aspectPadding}`}>
              <iframe
                src={inlineDemoUrl}
                title={`${localizedTitle} demo`}
                loading="lazy"
                allow="autoplay; fullscreen; clipboard-write; gamepad"
                allowfullscreen
                referrerpolicy="strict-origin-when-cross-origin"
                class="absolute inset-0 w-full h-full"
              ></iframe>
            </div>
            <div class="px-3 py-2 text-xs text-slate-600 bg-slate-50 border-t">
              {dictionary.projectDetail.inlineDemoFallback}
              <a
                href={demoLink?.url ?? inlineDemoUrl}
                class="ml-1 text-blue-700 hover:underline"
                rel="noopener noreferrer"
                target="_blank"
              >
                {demoLink?.label ?? dictionary.projectDetail.openDemo}
              </a>
            </div>
          </div>
        </section>
      ) : entry.data.media?.social_card?.src ? (
        <figure class="mt-4 max-w-4xl mx-auto inline-flex">
          <img
            src={entry.data.media.social_card.src}
            alt={entry.data.media.social_card.alt}
            width={entry.data.media.social_card.width}
            height={entry.data.media.social_card.height}
            class="w-full h-auto rounded border"
            loading="eager"
            decoding="async"
            onerror="this.onerror=null;this.style.display='none'"
          />
        </figure>
      ) : null}
      {entry.data.links?.length ? (
        <div class="mt-3 flex flex-wrap gap-3">
          {entry.data.links.map((l) => {
            const fav = faviconFor(l.url);
            const src = l.icon ?? fav.src;
            const onerr = l.icon ? undefined : (fav.fallback ? `this.onerror=null;this.src='${fav.fallback}'` : undefined);
            return (
              <a href={l.url} class="inline-flex items-center gap-2 text-sm text-blue-700 hover:underline" rel="noopener noreferrer" target="_blank">
                {src ? (
                  <img src={src} alt={fav.alt} width="16" height="16" loading="lazy" class="w-4 h-4 rounded-sm" onerror={onerr} />
                ) : null}
                <span>{l.label ?? l.rel}</span>
              </a>
            );
          })}
        </div>
      ) : null}
    </header>
    <div class="prose max-w-none">
      <Content />
    </div>
    {Array.isArray(entry.data.media?.images) && entry.data.media.images.length > 0 ? (
      <section class="mt-8">
        <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {entry.data.media.images.map((img) => (
            <li class="border rounded overflow-hidden">
              <div class="h-64 flex items-center justify-center">
                <img
                  src={img.src}
                  alt={img.alt}
                  width={img.width}
                  height={img.height}
                  loading="lazy"
                  decoding="async"
                  class="max-w-full max-h-full object-contain"
                />
              </div>
            </li>
          ))}
        </ul>
      </section>
    ) : null}
  </article>
</Base>
