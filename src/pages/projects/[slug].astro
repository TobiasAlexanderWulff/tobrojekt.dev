---
import Base from "~/layouts/Base.astro";
import { getCollection } from 'astro:content';
import { getLatestCommitDate, formatYMD } from "~/lib/github";
import { faviconFor } from "~/lib/links";

export async function getStaticPaths() {
  const entries = await getCollection('projects');
  return entries
    .filter((e) => e.data.visibility !== 'private')
    .map((entry) => ({ params: { slug: entry.slug }, props: { entry } }));
}

const { entry } = Astro.props;
const { Content } = await entry.render();

// Prefer external GitHub updated date when configured
let externalUpdated: string | null = null;
const gh = entry.data.external?.github as { repo?: string; branch?: string } | undefined;
if (gh?.repo) {
  externalUpdated = await getLatestCommitDate(gh.repo, gh.branch ?? 'main');
}
const updatedDate = externalUpdated ?? entry.data.dates?.updated;
const displayUpdated = updatedDate ? formatYMD(updatedDate) : null;
---
<Base title={`${entry.data.title} â€“ tobrojekt.dev`} description={entry.data.summary}>
  <article class="container py-10">
    <header class="mb-6">
      <h1 class="text-3xl font-bold">{entry.data.title}</h1>
      <p class="text-slate-700">{entry.data.summary}</p>
      {(entry.data.status || entry.data.dates) ? (
        <p class="text-sm text-slate-600 mt-1">
          {entry.data.status ? (
            <>
              Status: <span class="capitalize">{entry.data.status}</span>
            </>
          ) : null}
          {entry.data.dates?.started || entry.data.dates?.created ? (
            <span class="ml-3">Started: {entry.data.dates?.started ?? entry.data.dates?.created}</span>
          ) : null}
          {entry.data.dates?.completed ? (
            <span class="ml-3">Completed: {entry.data.dates.completed}</span>
          ) : null}
          {!entry.data.dates?.completed && displayUpdated ? (
            <span class="ml-3">Updated: {displayUpdated}</span>
          ) : null}
        </p>
      ) : null}
      {entry.data.tags?.length ? (
        <div class="mt-2 flex flex-wrap gap-2">
          {entry.data.tags.map((t) => (
            <a href={`/tags/${t}`} class="text-xs bg-slate-100 px-2 py-1 rounded">{t}</a>
          ))}
        </div>
      ) : null}
      {entry.data.media?.social_card?.src ? (
        <figure class="mt-4 max-w-4xl mx-auto inline-flex">
          <img
            src={entry.data.media.social_card.src}
            alt={entry.data.media.social_card.alt}
            width={entry.data.media.social_card.width}
            height={entry.data.media.social_card.height}
            class="w-full h-auto rounded border"
            loading="eager"
            decoding="async"
            onerror="this.onerror=null;this.style.display='none'"
          />
        </figure>
      ) : null}
      {entry.data.links?.length ? (
        <div class="mt-3 flex flex-wrap gap-3">
          {entry.data.links.map((l) => {
            const fav = faviconFor(l.url);
            const src = l.icon ?? fav.src;
            const onerr = l.icon ? undefined : (fav.fallback ? `this.onerror=null;this.src='${fav.fallback}'` : undefined);
            return (
              <a href={l.url} class="inline-flex items-center gap-2 text-sm text-blue-700 hover:underline" rel="noopener noreferrer" target="_blank">
                {src ? (
                  <img src={src} alt={fav.alt} width="16" height="16" loading="lazy" class="w-4 h-4 rounded-sm" onerror={onerr} />
                ) : null}
                <span>{l.label ?? l.rel}</span>
              </a>
            );
          })}
        </div>
      ) : null}
    </header>
    <div class="prose max-w-none">
      <Content />
    </div>
    {Array.isArray(entry.data.media?.images) && entry.data.media.images.length > 0 ? (
      <section class="mt-8">
        <ul class="grid gap-4 sm:grid-cols-2 lg:grid-cols-3">
          {entry.data.media.images.map((img) => (
            <li class="border rounded overflow-hidden">
              <img
                src={img.src}
                alt={img.alt}
                width={img.width}
                height={img.height}
                loading="lazy"
                decoding="async"
                class="w-full h-auto"
              />
            </li>
          ))}
        </ul>
      </section>
    ) : null}
  </article>
</Base>
